# -*- coding: utf-8 -*-
"""JUNK_notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LNsUzsNoRJCO0QAy5bH34pKlvswbysct
"""

import numpy as np 
import pandas as pd

import os
import sys
import matplotlib.pyplot as plt 
import re

import tensorflow as tf 
from tensorflow import keras
import datetime
import time
"""this dataset was released in 2018, therefore age calculations will be performed according to 2018"""
from tqdm import *
import re, string
from google.colab import drive 
drive.mount('/content/drive')

class data_prep:
  def __init__(self,dir):
    self.dir = dir

  def prep(self):
    city_url = 'https://pkgstore.datahub.io/core/world-cities/world-cities_csv/data/6cc66692f0e82b18216a48443b6b95da/world-cities_csv.csv'
    world_locations = pd.read_csv(city_url)
    world_locations.head(3)

    users_cleaned = pd.read_csv(self.dir
                            # ,usecols= users_cleand_cols
                            # ,nrows = row_num
                           )
    users_cleaned = users_cleaned.drop(columns =['access_rank'])
    users_cleaned = users_cleaned.dropna()
    users_cleaned = users_cleaned.reset_index()

    def coma_changer(x):
      return re.sub(',',' ',str(x))

    users_cleaned['location'] = users_cleaned['location'].apply(coma_changer)

    def punc_cleaner(x):
      a_string = str(x)
      new_string = a_string.translate(str.maketrans('', '', string.punctuation))
      return(new_string)

    def punc_cleaner_2(x):
      return (re.sub(' ','',str(x)))
    users_cleaned['location'] = users_cleaned['location'].apply(punc_cleaner)

    countries = []
    indexler = []

    for i in range(len(users_cleaned['location'])):
      k = users_cleaned['location'][i]
      for j in k.split():
    
        x = j

        if x in world_locations['subcountry'].values:
          y =((world_locations.loc[world_locations['subcountry'] == (x)]).index[0])
          countries.append(world_locations['country'][y])
          break

        elif x in world_locations['country'].values:
          y =((world_locations.loc[world_locations['country'] == (x)]).index[0])
          countries.append(world_locations['country'][y])
          break

        elif x in world_locations['name'].values:
          y =((world_locations.loc[world_locations['name'] == (x)]).index[0])
          countries.append(world_locations['country'][y])
          break
      
        else:
          countries.append(np.nan)
          break

    users_cleaned['location'] = users_cleaned['location'].apply(punc_cleaner_2)
    empty_cells = []
    for i in range(len(users_cleaned['location'])) :
      if len (users_cleaned['location'][i]) == 0 :
        empty_cells.append(i)

    users_cleaned = users_cleaned.drop(empty_cells).reset_index(drop = True)

    users_cleaned['location'] = users_cleaned['location'].apply(punc_cleaner_2)
    empty_cells = []
    for i in range(len(users_cleaned['location'])) :
      if len (users_cleaned['location'][i]) == 0 :
        empty_cells.append(i)

    users_cleaned = users_cleaned.drop(empty_cells).reset_index(drop = True)

    users_cleaned['countries'] = countries


    def join_cleaner(x):
      return (x.split('-')[0])

    join_year = users_cleaned['join_date'].apply(join_cleaner)

    def age_calculator(x):
      return(2022-int(x.split('-')[0]) ) 

    age = users_cleaned['birth_date'].apply(age_calculator)

    users_cleaned.head(3)

## total_interaction is the number of anime that user interacted with 
    total_interaction = users_cleaned['user_watching'] +users_cleaned['user_completed']+users_cleaned['user_onhold'] + users_cleaned['user_dropped'] +users_cleaned['user_plantowatch']
    users_cleaned['total_interaction'] = total_interaction
    users_cleaned['join_year'] = join_year
    users_cleaned['user_age'] = age
    users_cleaned = users_cleaned.dropna()
    users_cleaned.drop(columns=['index'])

    return users_cleaned
