
# -*- coding: utf-8 -*-
"""empty7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/180fJ08u7CUc0UXHOQtYgdO65yjZNHxTm
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf 
from tensorflow import keras
from tensorflow.keras import Model,layers,Input
from tensorflow.keras.layers import *
# import HelperFunctions
from HelperFunctions import time_conv,time_sorter,time_splitter,last_n_taker,unique_definer,corpus_creator,sequencer_multi,sequencer_unique,input_label_maker
from HelperFunctions import train_neg_maker,release_year
from metrics import mapk
from models import ret_model,rank_model
import os 
from sklearn.utils import shuffle

EMBEDDING_DIM = 256
SEQUENCE_LEN = 20
BATCH_SIZE = 512
NUM_EPOCHS = 1
K = 40

#### FOR THIS PROJECT, I WILL USE THE MOVIELENS 1M DATASET, BECAUSE 1M DATASET IS USER REACH FEATURES
movie_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/movies.dat'
movies_df = pd.read_csv(movie_url, delimiter = '::',encoding='ISO-8859-1',header = None)
movies_df.columns = ['movie_id','movie_title','genres']

ratings_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/ratings.dat'
ratings_df = pd.read_csv(ratings_url, delimiter = '::', header = None)
ratings_df.columns = ['user_id','movie_id','ratings','timestamp']

user_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/users.dat'
users_df = pd.read_csv(user_url, delimiter = '::', header = None)
users_df.columns = ['user_id','gender', 'age', 'occupation', 'zip_code']

ranking_df = pd.read_csv('drive/MyDrive/Colab Notebooks/two_stage_rec/ranking_df.csv')
ranking_df = ranking_df.drop(columns = ['Unnamed: 0'])
ranking_df.head(3)

unique_users_rank, num_unique_users_rank = unique_definer(ranking_df,'user_id')
unique_movies_rank, num_unique_movies_rank = unique_definer(ranking_df,'movie_id')

user_2enc_rank, enc_2user_rank = corpus_creator(unique_users_rank, start_index = 0)
movie_2enc_rank, enc_2movie_rank = corpus_creator(unique_movies_rank, start_index = 0)

ranking_df['user_id_enc'] = ranking_df['user_id'].map(enc_2user_rank) 
ranking_df['movie_id_enc'] = ranking_df['movie_id'].map(enc_2movie_rank) 
ranking_df['ratings']= np.ones(len(ranking_df), dtype = 'int32')

ranking_df = ranking_df.drop(columns= ['user_id','movie_id'])

ranking_df.head(3)

len(unique_movies_rank)

ranking_df_seq = sequencer_unique(ranking_df,'user_id_enc')
ranking_df_seq.head(3)

user_id_neg, neg_items = train_neg_maker(4, ranking_df_seq, 'movie_id_enc',unique_movies_rank)

ranking_df_neg = pd.DataFrame({'user_id_enc':user_id_neg,
                               'movie_id_enc':np.concatenate(np.concatenate(neg_items)),
                               'ratings':np.zeros(len(user_id_neg), dtype = 'int32')})

ranking_df = pd.concat([ranking_df, ranking_df_neg])
movies_df['movie_id_enc'] = movies_df['movie_id'].map(enc_2movie_rank)
ranking_df = ranking_df.merge(movies_df, left_on = 'movie_id_enc', right_on = 'movie_id_enc')
# ranking_df.head(3)
ranking_df['release_year'] = release_year(ranking_df, 'movie_title')
ranking_df = shuffle(ranking_df)
ranking_df.head(3)

max(ranking_df['movie_id_enc'])

ranking_model = rank_model(EMBEDDING_DIM,num_unique_movies_rank)
ranking_model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = 'Adam',
    metrics = ['accuracy'],
)

ranking_model.fit(
    [   tf.constant(ranking_df['user_id_enc']),
        tf.constant(ranking_df['movie_id_enc']),
        tf.constant(ranking_df['release_year']),
        ],
        tf.constant(ranking_df['ratings']),
     epochs = 1,
    #  batch_size = 1000
     )

ranking_model.predict([
                        tf.constant(ranking_df['user_id_enc'][0:2]),
                        tf.constant(ranking_df['movie_id_enc'][0:2]),
                        tf.constant(ranking_df['release_year'][0:2]),
])

selected_movies = np.array([3,28,184,130])

ranking_df[ranking_df['movie_id_enc'] == 315][['movie_id_enc','ratings','movie_id','movie_title','genres', 'release_year']].head(1)

total = []
for i in selected_movies:
    total.append(ranking_df[ranking_df['movie_id_enc'] == i][['movie_id_enc','ratings','movie_id','movie_title','genres', 'release_year']].head(1))

total = []
for i in selected_movies:
    total.append(np.array(ranking_df[ranking_df['movie_id_enc']==i]['release_year'])[0])

total

user_row = np.full(len(total),6)
user_row

ranking_predictions = ranking_model.predict([
                        tf.constant(user_row),
                        tf.constant(selected_movies),
                        tf.constant(total),
])

ranking_predictions

print(tf.math.top_k(np.array(ranking_predictions).reshape(1,4),k=4)[1])

