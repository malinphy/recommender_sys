
# -*- coding: utf-8 -*-
"""empty8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2jVUOc2iFZ0luSRFL3az8QQXNOTK43t
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf 
from tensorflow import keras
from tensorflow.keras import Model,layers,Input
from tensorflow.keras.layers import *
# import HelperFunctions
from HelperFunctions import time_conv,time_sorter,time_splitter,last_n_taker,unique_definer,corpus_creator,sequencer_multi,sequencer_unique,input_label_maker
from HelperFunctions import train_neg_maker,release_year
from metrics import mapk
from models import ret_model,rank_model
import os 
from sklearn.utils import shuffle

#### FOR THIS PROJECT, I WILL USE THE MOVIELENS 1M DATASET, BECAUSE 1M DATASET IS USER REACH FEATURES
movie_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/movies.dat'
movies_df = pd.read_csv(movie_url, delimiter = '::',encoding='ISO-8859-1',header = None)
movies_df.columns = ['movie_id','movie_title','genres']

ratings_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/ratings.dat'
ratings_df = pd.read_csv(ratings_url, delimiter = '::', header = None)
ratings_df.columns = ['user_id','movie_id','ratings','timestamp']

user_url = 'https://raw.githubusercontent.com/malinphy/datasets/main/ml_1M/users.dat'
users_df = pd.read_csv(user_url, delimiter = '::', header = None)
users_df.columns = ['user_id','gender', 'age', 'occupation', 'zip_code']

EMBEDDING_DIM = 256
SEQUENCE_LEN = 20
BATCH_SIZE = 512
NUM_EPOCHS = 1
K = 40

retrieval_df = ratings_df.merge(users_df, left_on = 'user_id', right_on = 'user_id')
# retrieval_df.head(3)

retrieval_df['timestamp'] = time_conv(retrieval_df['timestamp'])
retrieval_df = time_sorter(retrieval_df,'user_id', 'timestamp')
retrieval_df.head(3)

print('minimum number of movies that were interacted with user',np.min(retrieval_df.groupby(['user_id'])['movie_id'].count()))
print('maximum number of movies that were interacted with user',np.max(retrieval_df.groupby(['user_id'])['movie_id'].count()))

retrieval_df_diluted = last_n_taker(retrieval_df, 'user_id', SEQUENCE_LEN)

unique_users, num_unique_users = unique_definer(retrieval_df_diluted,'user_id')
unique_movies, num_unique_movies = unique_definer(retrieval_df_diluted,'movie_id')
# unique_title, num_unique_title = unique_definer(retrieval_df_diluted,'movie_title')
unique_occupations, num_unique_occupations = unique_definer(retrieval_df_diluted, 'occupation')
unique_zips, num_unique_zips = unique_definer(retrieval_df_diluted, 'zip_code')

user_2enc, enc_2user = corpus_creator(unique_users, start_index = 0)
movie_2enc, enc_2movie = corpus_creator(unique_movies, start_index = 0)
# title_2enc, enc_2title = corpus_creator(unique_title, start_index = 0)
occ_2enc, enc_2occ = corpus_creator(unique_occupations, start_index = 0)
zip_2enc, enc_2zip = corpus_creator(unique_zips, start_index = 0)

LE_gender = LabelEncoder()
LE_age = LabelEncoder()
LE_ge = LabelEncoder()
retrieval_df_enc = pd.DataFrame({
                                'user_id_enc' : retrieval_df_diluted['user_id'].map(enc_2user) ,
                                'movie_id_enc' : retrieval_df_diluted['movie_id'].map(enc_2movie) ,
                                'occupation_enc' : retrieval_df_diluted['occupation'].map(enc_2occ) ,
                                'gender_enc' : LE_gender.fit_transform(retrieval_df_diluted['gender']) ,
                                'age_enc' : LE_age.fit_transform(retrieval_df_diluted['age']) ,
                                'zip_code_enc' : retrieval_df_diluted['zip_code'].map(enc_2zip) ,
                                'timestamp' : retrieval_df_diluted['timestamp'].copy()
                                })
# retrieval_df_enc.head(3)

seq_retrieval_df_enc = sequencer_multi(retrieval_df_enc[['user_id_enc','movie_id_enc']],'user_id_enc')
seq_retrieval_df_enc_2 = sequencer_unique(retrieval_df_enc,'user_id_enc')
seq_retrieval_df_enc['occupation_enc'] = seq_retrieval_df_enc_2['occupation_enc']
seq_retrieval_df_enc['gender_enc'] = seq_retrieval_df_enc_2['gender_enc']
seq_retrieval_df_enc['age_enc'] = seq_retrieval_df_enc_2['age_enc']
seq_retrieval_df_enc['zip_code_enc'] = seq_retrieval_df_enc_2['zip_code_enc']

del seq_retrieval_df_enc_2

last_movie_enc, input_movie_enc = input_label_maker(seq_retrieval_df_enc,'movie_id_enc',SEQUENCE_LEN, splitter = True)
seq_retrieval_df_enc['last_movie_enc'] = last_movie_enc
seq_retrieval_df_enc['input_movie_enc'] = input_movie_enc

train_df, test_df = train_test_split(seq_retrieval_df_enc, train_size = 0.8, test_size = 0.2, random_state = 42)

input_movie_enc_train = [np.array(i)  for i in (train_df['input_movie_enc'])]
last_movie_enc_train = [np.array(i)  for i in (train_df['last_movie_enc'])]
occupation_enc_train = [np.array(i)  for i in (train_df['occupation_enc'])]
gender_enc_train = [np.array(i)  for i in (train_df['gender_enc'])]
age_enc_train = [np.array(i)  for i in (train_df['age_enc'])]
zip_code_enc_train = [np.array(i)  for i in (train_df['zip_code_enc'])]

input_movie_enc_test = [np.array(i)  for i in (test_df['input_movie_enc'])]
last_movie_enc_test = [np.array(i)  for i in (test_df['last_movie_enc'])]
occupation_enc_test = [np.array(i)  for i in (test_df['occupation_enc'])]
gender_enc_test = [np.array(i)  for i in (test_df['gender_enc'])]
age_enc_test = [np.array(i)  for i in (test_df['age_enc'])]
zip_code_enc_test = [np.array(i)  for i in (test_df['zip_code_enc'])]

input_movie_enc = [np.array(i)  for i in (seq_retrieval_df_enc['input_movie_enc'])]
last_movie_enc = [np.array(i)  for i in (seq_retrieval_df_enc['last_movie_enc'])]
occupation_enc = [np.array(i)  for i in (seq_retrieval_df_enc['occupation_enc'])]
gender_enc = [np.array(i)  for i in (seq_retrieval_df_enc['gender_enc'])]
age_enc = [np.array(i)  for i in (seq_retrieval_df_enc['age_enc'])]
zip_code_enc = [np.array(i)  for i in (seq_retrieval_df_enc['zip_code_enc'])]

EMBEDDING_DIM = 256
# SEQUENCE_LEN = 20
BATCH_SIZE = 512
NUM_EPOCHS = 1 
retieval_model = ret_model(SEQUENCE_LEN,EMBEDDING_DIM,BATCH_SIZE,NUM_EPOCHS,num_unique_movies)

retieval_model.compile(
    loss = tf.keras.losses.SparseCategoricalCrossentropy(),
    optimizer = 'Adam',
    metrics = ['accuracy'],
    )

retieval_model.fit(
    [   tf.constant(input_movie_enc),
        tf.constant(occupation_enc),
        tf.constant(gender_enc),
        tf.constant(age_enc),
        tf.constant(zip_code_enc)],
        tf.constant(last_movie_enc),
     epochs = NUM_EPOCHS,
    #  batch_size = BATCH_SIZE,
    verbose = 0
     )

model_path = 'drive/MyDrive/Colab Notebooks/two_stage_rec'
retieval_model.save('drive/MyDrive/Colab Notebooks/two_stage_rec/retrieval_model')

saved_retrieval_model = tf.keras.models.load_model('drive/MyDrive/Colab Notebooks/two_stage_rec/retrieval_model')

# saved_retrieval_model.summary()

item_embeddings = ((saved_retrieval_model.get_layer("softmax_layer").weights)[0])
user_emb_model = Model(inputs = saved_retrieval_model.inputs , outputs = saved_retrieval_model.get_layer('d3_layer').output )
user_embeddings = user_emb_model([
                                            tf.constant(input_movie_enc),
                                            tf.constant(occupation_enc),
                                            tf.constant(gender_enc),
                                            tf.constant(age_enc),
                                            tf.constant(zip_code_enc)
                                            ])

print('item_embeddings_shape',(item_embeddings).shape)
print('user_embeddings_test_shape',user_embeddings.shape)

user_item_matrix = tf.matmul(user_embeddings, item_embeddings)
print('user_item_matrix shape:',user_item_matrix.shape)

top_recommended_items_enc = tf.math.top_k(user_item_matrix, k=K)[1]

# print(mapk(np.array(last_movie_enc_test).reshape(-1,1), top_recommended_items_enc, k=K))

top_recommended_items = np.vectorize(movie_2enc.get)(np.concatenate(top_recommended_items_enc))

u = []
for i in range(1,top_recommended_items_enc.shape[0]+1):
    u.append(list(np.full(top_recommended_items_enc.shape[1],i)))

top_rec_user_id = np.concatenate(u)

retrieval_final_df = pd.DataFrame({'user_id_enc':top_rec_user_id , 'movie_id':top_recommended_items})
retrieval_final_df['user_id_enc'] = retrieval_final_df['user_id_enc'].map(enc_2user)
retrieval_final_df.rename(columns = {'user_id_enc':'user_id'}, inplace = True)

ranking_df = retrieval_final_df.copy()
ranking_df

ranking_df.to_csv('drive/MyDrive/Colab Notebooks/two_stage_rec/ranking_df.csv')

